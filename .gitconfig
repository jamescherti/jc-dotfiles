# Author: James Cherti
# URL: https://github.com/jamescherti/jc-dotfiles
#
# Description:
# ------------
# Git configuration (.gitconfig).
#
# License:
# --------
#
# Distributed under terms of the MIT license.
#
# Copyright (C) 2005-2025 James Cherti
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

[tag]
forceSignAnnotated = true

[pack]
# Configures Git to auto-detect the number of CPUs and set the number of threads
# accordingly.
threads = 0

# Allocate up to 5GB as the amount of memory consumed by each thread in
# git-pack-objects for pack window memory when no limit is specified on the
# command line. This enhances Git’s efficiency for large repositories.
windowMemory = 5g

# The packSizeLimit configuration in Git determines the maximum size of a
# packfile that Git will generate. A packfile is a file that contains a
# collection of objects, such as commits, trees, and blobs, in a compressed
# format.
packSizeLimit = 2g

[gc]
# Automatically triggers garbage collection when the number of loose objects
# exceeds 8,000, optimizing repository storage and performance. When there are
# more than this number of loose objects in the repository, git gc --auto will
# pack them. Some porcelain commands use this to perform lightweight garbage
# collection periodically. The default value is 6,700.
auto = 8000

[core]
pager = less -X -F
quotepath = off
editor = vim

# trailing-space: look for spaces at the end of a line
# space-before-tab: look for spaces before tabs at beginning of line
# removed: indent-with-non-tab
whitespace = space-before-tab,trailing-space

# Prevent showing files whose names contain non-ASCII symbols as unversioned.
precomposeunicode = false

# Preloads the index into memory for improved performance when running Git
# commands like status and diff. Setting this to true will make Git load the
# index into memory early in the execution of commands. This can lead to
# performance improvements for operations that involve the index, especially in
# repositories with a large number of files..
preloadindex = true

[diff]
tool = vimdiff

[rerere]
# The "reuse recorded resolution" (rerere) feature, which helps Git
# automatically resolve merge conflicts by reusing previously recorded conflict
# resolutions. The setting enabled = 1 indicates that the rerere feature is
# enabled.
enabled = 1

[color]
ui = true
diff = always

[push]
# This configuration automatically pushes the current branch, which helps
# prevent the error: “fatal: The current branch BRANCH has no upstream branch.”
# When this setting is in place, Git will push the current branch to the remote,
# assuming the branch has an upstream set.
default = current

# This setting automatically sets up remote tracking for new branches,
# eliminating the need to manually run git branch --set-upstream-to after
# creating a new branch. It automates the process of linking local branches to
# their corresponding remote branches. This is particularly useful for users who
# frequently create new branches, as it reduces the need for repetitive
# configuration.
autoSetupRemote = true

[merge]
# This setting enforce fast-forward merges, preventing unnecessary merge commits
# and maintaining a linear commit history.
ff = only

[pull]
# This setting enforce fast-forward merges, preventing unnecessary merge commits
# and maintaining a linear commit history.
ff = only

[init]
templatedir = ~/.git-templates
defaultBranch = main

[alias]

# This alias simplifies the process of pulling changes by automatically stashing
# local changes, rebasing the current branch on top of the remote, and then
# reapplying the stashed changes, ensuring a clean and linear commit history.
up = pull --rebase --autostash

s = show
cia = commit -a
rc = rebase --continue
amend = commit --amend
commend = commit --amend --no-edit
p = push
pf = push --force
a = add
aa = add -A
st = status -s
co = checkout
b = branch
rh = reset --hard HEAD
pl = pull
pa = pullall

d = diff HEAD
dc = diff --cached
dt = difftool

dw = diff --color-words HEAD
sw = show --color-words

l = log
ls = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
logs = log --show-signature --stat
lp = log -p

chp = cherry-pick
chpa = cherry-pick --abort
chpc = cherry-pick --continue
chpq = cherry-pick --quit
chps = cherry-pick --skip

# Cleanup: Delete local branches that have been merged, except for master, main,
# and develop. This command lists merged branches prompts the user to confirm
# deletion, and then deletes them.
cleanup = "! f() { git branch --merged | grep  -v '\\*\\|master\\|main\\|develop' | sed -E 's/^[ \t]+//'; }; if [ `f | wc -l | head -n 1` -ne 0 ]; then f; echo Press enter to delete...; read v; f | xargs -n 1 -r git branch -d; fi"

# Create a new branch, switch to it, and push it to the remote repository.
cbranch = "! git checkout -b $1 && git push -u origin $1"

set-upstream = "!git branch --set-upstream-to=origin/`git symbolic-ref --short HEAD`"

contributors = "!git --no-pager shortlog --summary --numbered --no-merges"
top-contributors = "!t() { c=${1:-10}; git --no-pager shortlog --summary --numbered --no-merges | head -n $c; }; t"
contributors-merges = "!git --no-pager shortlog --summary --numbered"
top-contributors-merges = "!t() { c=${1:-10}; git --no-pager shortlog --summary --numbered | head -n $c; }; t"

# uumaster = "!f() { ( git fetch upstream && git rebase -i upstream/master ) || echo Error.; }; f"
# author = "!f() { echo -n "Name:  "; git config user.name; echo -n "Email: "; git config user.email; }; f"
# upstream = "! set -u; f() { ! local url=$(git remote get-url upstream 2>&1 || true); test \"$url\" != \"$1\" && ( git remote remove upstream || true ) && git remote add upstream \"$1\"; }; f \"$1\" || true"
# whodid = "!git log -i -1 --pretty='format:%an <%ae>'"
# rdate = git find git --no-pager log -1 --format="%ai"
# rci = rcommit
# rcip = rpush
# cdiff = ydiff
# latest = "! git tag | vsort"
# diff = diff --color-words
# cip = "! git commit -a && git push"
# d = ydiff
# ds = ydiff --side-by-side
# cip = rpush
# di = diff
# dic = diff --cached
# diffc = diff --cached
# diffw = diff --word-diff=plain
# diw = diff --word-diff=plain
# ds = diff --stat
# fpull = "! git fetch && git merge --ff-only"
# pusha = push --all
# pulla = pull --all
# ctag = "! set -u; f() { git tag -s \"$1\" -m \"$1\"; }; f"
# rem = rebase origin/master
# up = pull --rebase
# ca = commit -a
# r = reset
